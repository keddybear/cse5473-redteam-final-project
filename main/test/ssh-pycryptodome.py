from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP
import binascii

recipient_key = RSA.generate(2048, e=17)
session_key = get_random_bytes(16)

# # Encrypt the session key with the public RSA key
# message = "Hello, world!"
# # data = message.encode()
# cipher_rsa = PKCS1_OAEP.new(recipient_key)
# ciphertext_rsa = cipher_rsa.encrypt(message)
# print "len: " + str(len(ciphertext_rsa))
# print repr(ciphertext_rsa)

# Encrypt the data with the AES session key
# cipher_aes = AES.new(session_key, AES.MODE_EAX)
# ciphertext, tag = cipher_aes.encrypt_and_digest(data)
#[ file_out.write(x) for x in (cipher_aes.nonce, tag, ciphertext) ]

print "e:"
print recipient_key.e
print "n:"
print recipient_key.n
print "d:"
print recipient_key.d

# rsa_key = {
# 	"e": 17,
# 	"d": 1568560811924611620106661755841468201717266394322268318493735523557050947635521634054955259339742269231556293406475766851897996062431769825767853143824929966759858765700214857764311433090038033144845961217006964801861386480535545362681406650697069715408566074125040809141061726147938528584071292888869029407534694760047538661262148496439488258430130059697770770893870812353110668027652660354970935553815086333119458148628076519005675402655104323726416001367554618380026165917491156534788119170894578997653370461894320526613513878872419509503539350843411737469252367486159616684412148864388410200614039197149961327457,
# 	"n": 23702696713527464481611777643826630603727581069758721257238670133750992097603438025719323918911660957276850655920078254650903051610080077367158669728910052831037865792803246739549594988916130278633227858390327468117016506816981574369407922721644609032840554009000616671464932750679959987492632870320687555491944107804209665062682235326172904265712696651613697808566180637187870437952158871006266578407390174661746872919818056787008007653132480912706351863850469608163111923270554588022880288337327962610044065388551056507591398945990958099911416158226155464950971930600769984333532821303973774429764427891704713733977
# }

# recipient_key = RSA.construct((rsa_key["n"],rsa_key["e"],rsa_key["d"]))

# print "e:"
# print recipient_key.e
# print "n:"
# print recipient_key.n
# print "d:"
# print recipient_key.d
